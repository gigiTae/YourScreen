//#include "Common.h"
//#include "Loader.h"
//#include "Geometry.h"

#include "FbxLoader.h"
#include <iostream>
#include "GetLoader.h"

#if defined(DEBUG) || defined(_DEBUG)
#define _CRTDBG_MAP_ALLOC
#include <crtdbg.h>
#endif

int main()
{
	//const char* fileName = "file.fbx";
	// const char* fileName = "file2.fbx";
<<<<<<< .mine
	const char* fileName1 = "file.fbx";
	const char* fileName2 = "a.fbx";
||||||| .r252
	//const char* fileName = "Axis2.fbx";
	const char* fileName = "a.fbx";
	FBXLoad::IFBXLoader* loader;
    FBXLoad::GetLoader a;
    loader = a.GetFBXLoader();
=======
	//const char* fileName = "Axis2.fbx";
	const char* fileName = "mm.fbx";
	FBXLoad::IFBXLoader* loader;
    FBXLoad::GetLoader a;
    loader = a.GetFBXLoader();
>>>>>>> .r307

	FBXLoad::IFBXLoader* loader = new FBXLoad::FbxLoader();

	//auto m = loader->GetMesh(fileName1, 0);
	auto m = loader->GetMesh(fileName1, 0);
	auto n = loader->GetMesh(fileName2, 0);
	
	//fileName = "mm.fbx";
	//auto m = loader->GetMesh(fileName, 0);

    delete loader;

	/*int i{0};
    std::cout << "< uv >" << std::endl;

    for (auto &v : m->_meshVertex)
    {
        i++;
        std::cout << v->_u << ", " << v->_v << std::endl;
    }*/


	std::cout << std::endl;
    for (int i = 0; i < m->_meshFace.size(); i++)
    {
        std::cout << i << "\t:   ";

        for (int j = 0; j < 3; j++)
        {
            std::cout << m->_meshFace[i]->vertexIndex[j] << "   ";
        }
        std::cout << std::endl;
    }


}